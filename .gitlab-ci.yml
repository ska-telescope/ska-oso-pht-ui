image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  JS_E2E_TEST_COMMAND: test:e2e
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - dependencies
  - build
  - lint
  - test
  - deploy
  - publish
  - scan
  - pages
  - integration
  # - staging

#Install basic dependencies using yarn
install-dependencies:
  image: ${JS_BUILD_IMAGE}
  stage: dependencies
  tags:
    - ${SKA_K8S_RUNNER}
  before_script:
    - rm -rf node_modules
  script:
    - make js-install
  cache:
    key:
      files:
        - ${JS_PROJECT_DIR}/yarn.lock
      prefix: $CI_COMMIT_SHORT_SHA
    paths:
      - ${JS_PROJECT_DIR}/node_modules/
      - ${JS_PROJECT_DIR}/cache/Cypress
    policy: push

ts-typecheck:
  image: ${JS_BUILD_IMAGE}
  stage: lint
  allow_failure: true
  before_script:
    - make js-install
  script:
    - make typecheck

# The info script in the templates is for a generic tango environment. We overwrite it to give more useful PHT information
.info_script: &info_script
    - |-
      echo "Status of pods in $KUBE_NAMESPACE namespace:"
      kubectl get pods -n $KUBE_NAMESPACE -o jsonpath="{range .items[*]}{'Pod: '}{.metadata.name}:{'\n'}{'\t'}{'Image: '}{.spec.containers[*].image}{'\n'}{'\t'}{'Status: '}{.status.phase}{'\n'}{end}{'\n'}"
      echo "Addresses to connect to the deployment of the PHT: "
      echo "  https://k8s.stfc.skao.int/$KUBE_NAMESPACE/pht/"

# Currently, the dev template uses ci-dev-$CI_PROJECT_NAME which means only one branch can be deployed at a time, so we overwrite this
.dev_env: &dev_env
  variables:
    KUBE_NAMESPACE: "dev-ska-oso-pht-ui-aaa"
    KUBE_HOST: https://k8s.stfc.skao.int
  environment:
    name: "dev-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"

js-e2e-deploy:
  variables: # use the loadbalancer as there is no authentication for back-end calls during tests
    KUBE_HOST: https://ingress-nginx-controller-lb-stfc-techops-production-cicd.ingress-nginx.svc.techops.internal.skao.int

js-e2e-test:
  allow_failure: true
  variables: # use the loadbalancer as the cypress tests would hit the log in page otherwise
    KUBE_HOST: https://ingress-nginx-controller-lb-stfc-techops-production-cicd.ingress-nginx.svc.techops.internal.skao.int

info-dev-environment:
  <<: *dev_env
  script:
    - *info_script

info-integration:
  script:
    - *info_script

# info-staging:
#   script:
#     - *info_script

deploy-dev-environment:
  <<: *dev_env
  needs:
    - oci-image-build

test-dev-environment:
  <<: *dev_env

stop-dev-environment:
  <<: *dev_env

deploy-integration:
  variables:
    KUBE_HOST: https://k8s.stfc.skao.int

include:
  # TS linting and unit testing
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/js.gitlab-ci.yml'
  # OCI
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image.gitlab-ci.yml"
  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'
  # .post step finalisers eg: badges
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
  # Helm Chart linting and Publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'
  # Tag Based GitLab Release Management
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'
    # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'
  # deploy steps
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.dev.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.integration.gitlab-ci.yml'
