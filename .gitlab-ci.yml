variables:
  GIT_SUBMODULE_STRATEGY: recursive
  KUBE_HOST: 'https://k8s.stfc.skao.int'
  a11y_urls: $KUBE_HOST/$KUBE_NAMESPACE/pht
  JS_NODE_VERSION: 21

stages:
  - dependencies
  - lint
  - build
  - test
  - scan
  - pages
  - deploy
  - integration
  - staging
  - accessibility
  - publish

# #Install basic dependencies using yarn
# install_dependencies:
#   image: node:20.2.0-alpine3.18
#   stage: dependencies
#   tags:
#     - ska-default
#   before_script:
#     - rm -rf node_modules
#   script:
#     - make js-install
#   cache:
#     paths:
#       - ${JS_PROJECT_DIR}/node_modules/
#     policy: push

# #Run the static code analysis
# code_analysis:
#   image: node:20.2.0-alpine3.18
#   stage: lint
#   tags:
#     - ska-default
#   cache:
#     paths:
#       - node_modules/
#     policy: pull
#   before_script:
#     - mkdir -p build/reports
#   script:
#     - yarn install --immutable
#     - yarn code-analysis
#     - mv linting.xml build/reports/linting.xml
#   artifacts:
#     paths:
#       - build/

# js-audit:
#   image: node:${JS_NODE_VERSION}
#   stage: scan
#   tags:
#     - ska-default
#   allow_failure: true
#   before_script:
#     - '[ -f .make/js.mk ] || (echo "File js.mk not included in Makefile"; exit 1;)'
#     - 'make help | grep js-audit'
#   script:
#     - make js-audit

# # run the cypress test coverage reports
# test_and_coverage:
#   image: cypress/browsers:node-20.12.2-chrome-124.0.6367.155-1-ff-125.0.3-edge-124.0.2478.80-1
#   stage: test
#   tags:
#     - ska-default
#   before_script:
#     - rm -rf node_modules
#     - mkdir -p build/reports
#     - mkdir -p build/.nyc_output
#     - yarn install --frozen-lockfile
#   script:
#     - yarn test:component:headless
#     - yarn test:coverage:report:ci
#     - cp build/reports/cobertura-coverage.xml build/reports/code-coverage.xml
#   artifacts:
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: build/reports/cobertura-coverage.xml
#     paths:
#       - build/

# test_e2e:
#   image: cypress/browsers:node-20.12.2-chrome-124.0.6367.155-1-ff-125.0.3-edge-124.0.2478.80-1
#   stage: test
#   tags:
#     - ska-k8s
#   allow_failure: true
#   before_script:
#     - rm -rf node_modules
#     - mkdir -p build/reports
#     - mkdir -p build/.nyc_output
#     - yarn install --frozen-lockfile
#   script:
#     - yarn add cypress
#     - yarn start &
#     - yarn test:e2e:headless
#     - yarn test:coverage:report:ci
#     - cp build/reports/cobertura-coverage.xml build/reports/e2e-coverage.xml


integration-test:
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  stage: test
  tags:
    - ska-k8s
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  before_script:
    - apt update && apt install -y make
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile"; exit 1;)'
    - '[ -f .make/js.mk ] || (echo "File js.mk not included in Makefile"; exit 1;)'
    - make k8s-install-chart
    - make k8s-wait
    - curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
    - apt-get -q=2 install nodejs -y
    - apt-get -q=2 install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb # install Cypress dependencies
    - npm install -g yarn
    - make js-install-reinstall
  script:
    - make js-e2e-test
    - yarn test:coverage:report:ci
  rules:
    - exists:
        - tests/cypress/**/*
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-integration-test
    auto_stop_in: 1 minute
    kubernetes:
      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA
  artifacts:
    when: always
    paths:
      - tests/cypress/artefacts
      - build

stop-integration-test:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: test
  tags:
    - ska-k8s
  when: manual
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    action: stop

# # list the current top level dependencies for the project
# list_dependencies:
#   image: node:20.2.0-alpine3.18
#   stage: test
#   tags:
#     - ska-default
#   allow_failure: true
#   cache:
#     paths:
#       - node_modules/
#     policy: pull
#   script:
#     - yarn install --immutable
#     - yarn list --depth=0 --json >> npm_deps.json
#     - yarn list --depth=0  >> npm_deps.txt
#     - mkdir .public
#     - cp npm_deps.txt .public/
#     - cp npm_deps.json .public/
#   artifacts:
#     paths:
#       - .public

# test-counts:
#   image: cypress/browsers:node-20.12.2-chrome-124.0.6367.155-1-ff-125.0.3-edge-124.0.2478.80-1
#   stage: test
#   tags:
#     - ska-default
#   before_script:
#     - rm -rf node_modules
#     - mkdir -p build/tests
#     - yarn install --immutable
#   script:
#     - yarn test:cypress:component:ci
#     - yarn merge-reports
#   artifacts:
#     paths:
#       - build/

# # Build the application
# build:
#   image: node:20.2.0-alpine3.18
#   stage: build
#   tags:
#     - ska-default
#   cache:
#     paths:
#       - node_modules/
#     policy: pull
#   script:
#     - yarn install --immutable
#     - yarn build

# # export the report
# pages:
#   stage: pages
#   tags:
#     - ska-default
#   dependencies:
#     - test-counts
#     - test_and_coverage
#     - test_e2e
#     - list_dependencies
#     - code_quality
#   script:
#     - mv public/* .
#     - cp -r build/* public
#     - cp -r .public/* public
#   artifacts:
#     paths:
#       - public
#     expire_in: 30 days

########################## PHT SPECIFIC STUFF BELOW HERE #################################

# .info_script: &info_script
#   - |-
#     echo "Status of pods in $KUBE_NAMESPACE namespace:"
#     kubectl get pods -n $KUBE_NAMESPACE -o jsonpath="{range .items[*]}{'Pod: '}{.metadata.name}:{'\n'}{'\t'}{'Image: '}{.spec.containers[*].image}{'\n'}{'\t'}{'Status: '}{.status.phase}{'\n'}{end}{'\n'}"
#     echo "Addresses to connect to the deployment of the PHT: "
#     echo "  https://$KUBE_HOST/$KUBE_NAMESPACE/pht"
#     echo "Backend API:"
#     echo "  https://$KUBE_HOST/$KUBE_NAMESPACE/pht/api/v2/ui/"

# xray-publish:
#   variables:
#     XRAY_TEST_RESULT_FILE: ctrf/ctrf-report.json
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "main"'
#       when: always
#     - if: '$CI_COMMIT_REF_NAME != "main"'
#       when: manual

# .dev_env: &dev_env
#   variables:
#     KUBE_NAMESPACE: 'dev-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG'

#   environment:
#     name: 'dev-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG'

# info-dev-environment:
#   <<: *dev_env
#   script:
#     - *info_script

# info-integration:
#   script:
#     - *info_script

# info-staging:
#   script:
#     - *info_script

# deploy-dev-environment:
#   <<: *dev_env

# test-dev-environment:
#   <<: *dev_env

# stop-dev-environment:
#   <<: *dev_env

# helm-chart-build:
#   allow_failure: true

########################## PHT SPECIFIC STUFF ABOVE HERE #################################

include:
  # - template: Code-Quality.gitlab-ci.yml
  # - template: 'Verify/Accessibility.gitlab-ci.yml'
  # # Docs pages
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/docs.gitlab-ci.yml'
    # OCI Images
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'
    # Tag Based GitLab Release Management
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/release.gitlab-ci.yml'
    # .post step finalizers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'
    # helm chart
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'
  #   # deploy steps
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'
  #   # Upload BDD test results to JIRA X-ray
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/xray-publish.gitlab-ci.yml'

  # TS linting and unit testing
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/js-lint.gitlab-ci.yml'
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/js-test.gitlab-ci.yml'

# code_quality:
#   # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#generate-an-html-report
#   artifacts:
#     paths: [gl-code-quality-report.json]
#   # disable dind service as it's not needed for ska-default runners
#   services: []
#   tags:
#     - ska-default
#   # We need to merge the rules with what we have here on template rules
#   # https://gitlab.com/ska-telescope/templates-repository/-/blob/master/gitlab-ci/includes/rules.gitlab-ci.yml
#   # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#using-with-merge-request-pipelines
#   rules:
#     - if: '$CODE_QUALITY_DISABLED'
#       when: never
#     # don't run branch pipeline if there are open MRs
#     - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
#       when: never
#     # run on MRs
#     - if: $CI_MERGE_REQUEST_IID
#     # For `$CI_DEFAULT_BRANCH` branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
#     - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
#     # For tags, create a pipeline.
#     - if: '$CI_COMMIT_TAG'
#     # run on branches
#     - if: '$CI_COMMIT_BRANCH'
