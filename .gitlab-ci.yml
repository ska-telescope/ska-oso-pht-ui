image: $SKA_K8S_TOOLS_BUILD_DEPLOY

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  NODE_IMAGE: 'node:22'
  CYPRESS_IMAGE: 'cypress/browsers:22.12.0'
  YARN_VERSION: '4.3.1'
  JS_E2E_TESTS_DIR: cypress
  JS_E2E_TEST_COMMAND: test:e2e

#  KUBE_HOST: 'https://k8s.stfc.skao.int'
#  a11y_urls: $KUBE_HOST/$KUBE_NAMESPACE/senscalc
#  JS_NODE_VERSION: 22

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: 'Verify/Accessibility.gitlab-ci.yml'
  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'
    # OCI Images
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'
    # Tag Based GitLab Release Management
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'
    # .post step finalizers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'
    # helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'
    # deploy steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'
    # Upload BDD test results to JIRA X-ray
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/xray-publish.gitlab-ci.yml'
    # TS linting and unit testing
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/js-lint.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/js-e2e-test.gitlab-ci.yml'

stages:
  - dependencies
  - lint
  - build
  - test
  - scan
  - pages
  - deploy
  - integration
  - staging
  - accessibility
  - publish

install_dependencies:
  image: $NODE_IMAGE
  stage: dependencies
  tags:
    - k8srunner
  before_script:
    - rm -rf node_modules
  script:
    - yarn install --immutable
    - yarn list --depth=0 --json >> npm_deps.json
    - yarn list --depth=0  >> npm_deps.txt
    - mkdir .public
    - cp npm_deps.txt .public/
    - cp npm_deps.json .public/
  artifacts:
    paths:
      - .public
  cache:
    paths:
      - node_modules/
    policy: push

code_analysis:
  image: $NODE_IMAGE
  stage: lint
  tags:
    - ska-default
  cache:
    paths:
      - node_modules/
    policy: pull
  before_script:
    - mkdir -p build/reports
  script:
    - yarn install --immutable
    - yarn code-analysis
    - mv linting.xml build/reports/linting.xml
  artifacts:
    paths:
      - build/
    reports:
      junit: build/reports/linting.xml

js-lint:
  cache:
    paths:
    # - node_modules/
    policy: pull
  before_script:
    # - mkdir -p build/reports
  after_script:
    # - yarn install --immutable
    # - yarn code-analysis
    # - mv linting.xml build/reports/linting.xml
  artifacts:
    paths:
    # - build/
    reports:
      # junit: build/reports/linting.xml

test_and_coverage:
  allow_failure: true
  image: cypress/browsers:22.12.0
  stage: test
  tags:
    - ska-default
  before_script:
    - rm -rf node_modules
    - mkdir -p build/reports
    - mkdir -p build/tests
    - mkdir -p build/.nyc_output
    - yarn install --immutable
  script:
    - yarn test:cypress:component:ci
    - yarn merge-component-reports
    - yarn test:coverage:report:ci
    - cp build/reports/cobertura-coverage.xml build/tests/e2e-coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/tests/e2e-coverage.xml
      junit: build/tests/component-tests.xml, build/tests/e2e-coverage.xml
    paths:
      - build/

stop-integration-test:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: test
  tags:
    - ska-k8s
  when: manual
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    action: stop

# list the current top level dependencies for the project
list_dependencies:
  image: $NODE_IMAGE
  stage: dependencies
  tags:
    - ska-default
  allow_failure: true
  #cache:
  #  paths:
  #    - node_modules/
  #  policy: pull
  script:
    - yarn install --immutable
    #- yarn list --depth=0 --json >> npm_deps.json
    #- yarn list --depth=0  >> npm_deps.txt
    #- mkdir .public
    #- cp npm_deps.txt .public/
    #- cp npm_deps.json .public/
  #artifacts:
  #paths:
  #  - .public

# Build the application
build:
  image: $NODE_IMAGE
  stage: build
  tags:
    - ska-default
  cache:
    paths:
      - node_modules/
    policy: pull
  script:
    - yarn install --immutable
    - yarn build

# export the report
pages:
  stage: pages
  tags:
    - ska-default
  dependencies:
    # - test-counts
    - test_and_coverage
    - js-e2e-test
    # - list_dependencies
    - code_quality
  script:
    - mv public/* .
    - cp -r build/* public
    - cp -r .public/* public
  artifacts:
    paths:
      - public
    expire_in: 30 days

######################### PHT SPECIFIC STUFF BELOW HERE #################################

.info_script: &info_script
  - |-
    echo "Status of pods in $KUBE_NAMESPACE namespace:"
    kubectl get pods -n $KUBE_NAMESPACE -o jsonpath="{range .items[*]}{'Pod: '}{.metadata.name}:{'\n'}{'\t'}{'Image: '}{.spec.containers[*].image}{'\n'}{'\t'}{'Status: '}{.status.phase}{'\n'}{end}{'\n'}"
    echo "Addresses to connect to the deployment of the PHT: "
    echo "  https://$KUBE_HOST/$KUBE_NAMESPACE/pht"
    echo "Backend API:"
    echo "  https://$KUBE_HOST/$KUBE_NAMESPACE/pht/api/v2/ui/"

xray-publish:
  variables:
    XRAY_TEST_RESULT_FILE: ctrf/ctrf-report.json
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always
    - if: '$CI_COMMIT_REF_NAME != "main"'
      when: manual

.dev_env: &dev_env
  variables:
    KUBE_NAMESPACE: 'dev-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG'

  environment:
    name: 'dev-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG'

info-dev-environment:
  <<: *dev_env
  script:
    - *info_script

info-integration:
  script:
    - *info_script

info-staging:
  script:
    - *info_script

deploy-dev-environment:
  <<: *dev_env
  needs:
    - oci-image-build

test-dev-environment:
  <<: *dev_env

stop-dev-environment:
  <<: *dev_env

helm-chart-build:
  allow_failure: true

oci-image-build:
  allow_failure: true

########################## PHT SPECIFIC STUFF ABOVE HERE #################################

js-e2e-deploy:
  allow_failure: true
  rules:
    - exists:
        - cypress/integration/**/*.test.js

js-e2e-test:
  allow_failure: true
  before_script:
    - make js-install-reinstall
    - mkdir -p build/screenshots
    - mkdir -p build/reports
    - mkdir -p build/tests
    - mkdir -p build/.nyc_output
  variables:
    KUBE_HOST: 'http://ingress-nginx-controller-lb-stfc-techops-production-cicd.ingress-nginx.svc.techops.internal.skao.int'
  after_script:
    - cp cypress/artefacts/screenshots/*.png build/screenshots
    - yarn test:e2e:coverage
    - cp build/reports/cobertura-coverage.xml build/reports/e2e-coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/e2e-coverage.xml
      junit: build/reports/component-tests.xml, build/reports/e2e-coverage.xml
  rules:
    - exists:
        - cypress/integration/**/*.test.tsx

code_quality:
  # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#generate-an-html-report
  # artifacts:
  #  paths: [gl-code-quality-report.json]
  # disable dind service as it's not needed for ska-default runners
  services: []
  tags:
    - ska-default
  # We need to merge the rules with what we have here on template rules
  # https://gitlab.com/ska-telescope/templates-repository/-/blob/master/gitlab-ci/includes/rules.gitlab-ci.yml
  # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#using-with-merge-request-pipelines
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    # don't run branch pipeline if there are open MRs
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    # run on MRs
    - if: $CI_MERGE_REQUEST_IID
    # For `$CI_DEFAULT_BRANCH` branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # For tags, create a pipeline.
    - if: '$CI_COMMIT_TAG'
    # run on branches
    - if: '$CI_COMMIT_BRANCH'
